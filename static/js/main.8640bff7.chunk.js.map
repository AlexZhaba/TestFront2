{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","URL","CustomInput","props","useState","active","setActive","className","style","color","transition","title","onFocus","onBlur","value","onChange","event","change","target","type","placeholder","freeEmailStatus","CircularProgress","size","freeNameStatus","SignUp","isLoading","setIsLoading","fullName","setFullName","username","setUsername","email","setEmail","password","setPassword","confPassword","setConfPassword","setFreeEmailStatus","setFreeNameStatus","useEffect","clearTimeout","window","emailTime","setTimeout","test","String","toLowerCase","validateEmail","axios","post","JSON","stringify","mail","then","response","status","console","log","catch","e","nameTime","onClick","url","method","headers","data","md5","alert","display","SignIn","getUrlParameter","name","GETurl","replace","results","RegExp","exec","decodeURIComponent","Handler","setStatus","location","search","token","to","App","activePage","setActivePage","id","path","render","width","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"6JAAAA,EAAOC,QAAU,IAA0B,kC,+KCUvCC,EAAM,gCAENC,EAAc,SAACC,GAAW,IAAD,EACDC,oBAAS,GADR,mBACtBC,EADsB,KACdC,EADc,KAE3B,OACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,0BAA0BC,MAAOH,EAAS,CAACI,MAAO,UAAWC,WAAY,WAAa,CAACA,WAAY,YAAaP,EAAMQ,OACrI,2BAAOJ,UAAU,aAAaK,QAAS,kBAAMN,GAAU,IAAOO,OAAQ,kBAAMP,GAAU,IAAQQ,MAAOX,EAAMW,MAAOC,SAAU,SAACC,GAAD,OAAWb,EAAMc,OAAOD,EAAME,OAAOJ,QAC7JK,KAAsB,aAAhBhB,EAAMQ,OAAwC,qBAAhBR,EAAMQ,MAA+B,WAAa,OACtFS,YAAa,KACI,UAAhBjB,EAAMQ,OAAqB,yBAAKJ,UAAU,mBACd,QAA1BJ,EAAMkB,iBAA6B,kKACT,OAA1BlB,EAAMkB,iBAA4B,2IACR,SAA1BlB,EAAMkB,iBAA8B,kBAACC,EAAA,EAAD,CAAkBC,KAAM,KAClC,OAA1BpB,EAAMkB,iBAA4B,0BAAMb,MAAO,CAACC,MAAO,YAArB,yLAEpB,aAAhBN,EAAMQ,OAAwB,yBAAKJ,UAAU,mBAClB,OAAzBJ,EAAMqB,gBAA2B,sLACR,SAAzBrB,EAAMqB,gBAA6B,kBAACF,EAAA,EAAD,CAAkBC,KAAM,KAClC,OAAzBpB,EAAMqB,gBAA2B,0BAAMhB,MAAO,CAACC,MAAO,YAArB,qJAW1CgB,EAAS,WAAO,IAAD,EACerB,oBAAS,GADxB,mBACZsB,EADY,KACDC,EADC,OAEavB,mBAAS,IAFtB,mBAEZwB,EAFY,KAEFC,EAFE,OAGazB,mBAAS,IAHtB,mBAGZ0B,EAHY,KAGFC,EAHE,OAIO3B,mBAAS,IAJhB,mBAIZ4B,EAJY,KAILC,EAJK,OAKa7B,mBAAS,IALtB,mBAKZ8B,EALY,KAKFC,EALE,OAMqB/B,mBAAS,IAN9B,mBAMZgC,EANY,KAMEC,EANF,OAO2BjC,mBAAS,MAPpC,mBAOZiB,EAPY,KAOKiB,EAPL,OAQyBlC,mBAAS,MARlC,mBAQZoB,EARY,KAQIe,EARJ,OASuBnC,mBAAS,MAThC,6BAkBjBoC,qBAAU,WACM,KAAVR,GACFM,EAAmB,MACnBG,aAAaC,OAAOC,aAEpBF,aAAaC,OAAOC,WACpBD,OAAOC,UAAYC,YAAW,WAC5BN,EAAmB,SA9BP,SAACN,GAEnB,MADS,wIACCa,KAAKC,OAAOd,GAAOe,eA6BlBC,CAAchB,GACjBM,EAAmB,OAGnBW,IAAMC,KAAN,UAAcjD,EAAd,eAAgCkD,KAAKC,UAAU,CAC7CC,KAAMrB,KACJsB,MAAK,SAAAC,GACLjB,EAAuC,MAApBiB,EAASC,OAAiB,KAAO,MACpDC,QAAQC,IAAI,cAAeH,MAC1BI,OAAM,SAAAC,GACPtB,EAAmB,WAGxB,QAEJ,CAACN,IACJQ,qBAAU,WACS,KAAbV,GACFS,EAAkB,MAClBE,aAAaC,OAAOmB,YAEpBpB,aAAaC,OAAOmB,UACpBnB,OAAOmB,SAAWjB,YAAW,WAC3BL,EAAkB,QAClBU,IAAMC,KAAN,UAAcjD,EAAd,gBAAiCkD,KAAKC,UAAU,CAC9CtB,SAAUA,KACRwB,MAAK,SAAAC,GACPhB,EAAkB,SACjBoB,OAAM,SAAAC,GACPrB,EAAkB,WAEnB,QAEJ,CAACT,IACJU,qBAAU,WACAnB,IAQP,CAACA,IAwBJ,OACE,yBAAKd,UAAU,qBACb,kBAAC,EAAD,CAAaI,MAAM,YAAYG,MAAOc,EAAUX,OAAQY,IACxD,kBAAC,EAAD,CAAalB,MAAM,WAAWG,MAAOgB,EAAUb,OAAQc,EAAaP,eAAgBA,IACpF,kBAAC,EAAD,CAAab,MAAM,QAAQG,MAAOkB,EAAOf,OAAQgB,EAAUZ,gBAAiBA,IAC5E,kBAAC,EAAD,CAAaV,MAAM,WAAWG,MAAOoB,EAAUjB,OAAQkB,IACvD,kBAAC,EAAD,CAAaxB,MAAM,mBAAmBG,MAAOsB,EAAcnB,OAAQoB,EAAiBH,SAAUA,IAC9F,yBAAK3B,UAAU,oBAAoBuD,QAAS,kBA7B9CnC,GAAa,QACbsB,IAAM,CACJc,IAAI,GAAD,OAAK9D,EAAL,WACH+D,OAAQ,OACRC,QAAS,GAKTC,KAAMf,KAAKC,UAAU,CACnBxB,SAAUA,EACVE,SAAUA,EACVE,MAAOA,EACPE,SAAUiC,IAAIjC,OAEfoB,MAAK,SAAAC,GACN5B,GAAa,GACbyC,MAAM,WACLT,OAAM,SAAAC,SAYL,0BAAMpD,MAAOkB,EAAY,CAAC2C,QAAS,QAAU,IAA7C,WACA,yBAAK9D,UAAU,kBAAkBC,MAAQkB,EAAgC,GAApB,CAAC2C,QAAS,SAC7D,kBAAC/C,EAAA,EAAD,CAAkBb,MAAM,UAAUc,KAAM,SAO9C+C,EAAS,WAAO,IAAD,EACalE,mBAAS,IADtB,mBACZ0B,EADY,KACFC,EADE,OAEa3B,mBAAS,IAFtB,mBAEZ8B,EAFY,KAEFC,EAFE,OAGe/B,oBAAS,GAHxB,mBAGZsB,EAHY,KAGDC,EAHC,KAyBjB,OACE,yBAAKpB,UAAU,qBACb,kBAAC,EAAD,CAAaI,MAAM,WAAWG,MAAOgB,EAAUb,OAAQc,IACvD,kBAAC,EAAD,CAAapB,MAAM,WAAWG,MAAOoB,EAAUjB,OAAQkB,IAIvD,yBAAK5B,UAAU,oBAAoBuD,QAAS,kBA3B9CnC,GAAa,QACbsB,IAAM,CACJc,IAAI,GAAD,OAAK9D,EAAL,cACH+D,OAAQ,OACRC,QAAS,GAKTC,KAAMf,KAAKC,UAAU,CACnBtB,SAAUA,EACVI,SAAUiC,IAAIjC,OAEfoB,MAAK,SAAAC,GACN5B,GAAa,GACbyC,MAAM,WACLT,OAAM,SAAAC,SAYP,0BAAMpD,MAAOkB,EAAY,CAAC2C,QAAS,QAAU,IAA7C,WACE,yBAAK9D,UAAU,kBAAkBC,MAAQkB,EAAgC,GAApB,CAAC2C,QAAS,SAC7D,kBAAC/C,EAAA,EAAD,CAAkBb,MAAM,UAAUc,KAAM,SAOlD,SAASgD,EAAgBC,EAAMC,GAC7BD,EAAOA,EAAKE,QAAQ,OAAQ,OAAOA,QAAQ,OAAQ,OACnD,IACIC,EADQ,IAAIC,OAAO,SAAWJ,EAAO,aACrBK,KAAKJ,GACzB,OAAmB,OAAZE,EAAmB,GAAKG,mBAAmBH,EAAQ,GAAGD,QAAQ,MAAO,MAE9E,IAAIK,EAAU,SAAC5E,GACbsD,QAAQC,IAAI,WAAYvD,GADD,MAEGC,mBAAS,QAFZ,mBAElBoD,EAFkB,KAEVwB,EAFU,KAmCvB,OAhCAxC,qBAAU,WAER,GAAa,iBADF+B,EAAgB,OAAQpE,EAAM8E,SAASC,QACrB,CAC3B,IAAIC,EAAQZ,EAAgB,QAASpE,EAAM8E,SAASC,QAChD7B,EAAOkB,EAAgB,OAAQpE,EAAM8E,SAASC,QAIlD,GAHAzB,QAAQC,IAAI,QAASL,GACrBI,QAAQC,IAAI,SAAUyB,IAEjBA,IAAU9B,EAEb,YADA2B,EAAU,eAEL/B,IAAM,CACXc,IAAI,GAAD,OAAK9D,EAAL,WACH+D,OAAQ,OACRC,QAAS,GAKTC,KAAMf,KAAKC,UAAU,CACnBpB,MAAOqB,EACP8B,MAAOA,MAEN7B,MAAK,SAAAC,GACNyB,EAAU,SACTrB,OAAM,SAAAC,GACPoB,EAAU,eAGdA,EAAU,eAEX,CAACxB,IACW,cAAXA,EAEA,kBAAC,IAAD,CAAU4B,GAAG,UAKF,SAAX5B,EAED,2CAKY,gBAAXA,EAEA,2CAKW,QAAXA,EAEA,oCAKW,OAAXA,EAEA,kBAAC,IAAD,CAAU4B,GAAG,kBAFjB,GAkDaC,EAzCL,WAAO,IAAD,EACoBjF,mBAAS,GAD7B,mBACTkF,EADS,KACGC,EADH,KAEd,OACE,yBAAKC,GAAG,WACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,KAAO,QACPC,OAAU,kBAAM,yBAAKnF,UAAU,mBAC/B,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,gBAAgBuD,QAAS,kBAAMyB,EAAc,IAAI/E,MAAsB,IAAf8E,EAAmB,CAAC7E,MAAO,WAAa,IAA/G,WAGA,yBAAKF,UAAU,gBAAeuD,QAAS,kBAAMyB,EAAc,IAAI/E,MAAsB,IAAf8E,EAAkB,CAAC7E,MAAO,WAAa,IAA7G,YAIF,yBAAKD,MAAO,CAACmF,MAAO,SAED,IAAfL,GAAoB,kBAAC,EAAD,MAGL,IAAfA,GAAoB,kBAAC,EAAD,YAM5B,kBAAC,IAAD,CACEG,KAAK,WACLC,OAAQ,SAACvF,GAAD,OAAW,iDAErB,kBAAC,IAAD,CACEsF,KAAK,IACLC,OAAQ,SAACvF,GAAD,OAAW,kBAAC,EAAYA,SCpStByF,QACW,cAA7BlD,OAAOuC,SAASY,UAEe,UAA7BnD,OAAOuC,SAASY,UAEhBnD,OAAOuC,SAASY,SAASC,MACvB,2D,YCXNC,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,IAAD,KACM,kBAAC,EAAD,QAGRC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd5C,OAAM,SAAA6C,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.8640bff7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\n\r\nimport md5 from 'md5';\r\n\r\nimport {CircularProgress } from '@material-ui/core';\r\n\r\nlet URL = \"https://4cce06fecf8c.ngrok.io\";\r\n\r\nlet CustomInput = (props) => {\r\n  let [active, setActive] = useState(false);\r\n  return (\r\n    <div className=\"input__wrapper\">\r\n      <div className='input__title__container' style={active ? {color: \"#ad5050\", transition: \".2s all\"} : {transition: \".2s all\"}}>{props.title}</div>\r\n      <input className='reg__input' onFocus={() => setActive(true)} onBlur={() => setActive(false)} value={props.value} onChange={(event) => props.change(event.target.value) }\r\n          type={props.title === \"password\" || props.title === \"confirm password\" ? \"password\" : \"text\"}\r\n          placeholder={\"\"}/>\r\n          {props.title === \"email\" && <div className=\"input__subtitle\">\r\n            {props.freeEmailStatus === \"ERR\" && <span>Долбаеб введи нормально</span>}\r\n            {props.freeEmailStatus === \"NO\" && <span>Такой пидар уже есть</span>}\r\n            {props.freeEmailStatus === \"LOAD\" && <CircularProgress size={20}/>}\r\n            {props.freeEmailStatus === \"OK\" && <span style={{color: \"#4fb065\"}}>Такой пидарской почты ни у кого нет</span>}\r\n          </div> }\r\n          {props.title === \"username\" && <div className=\"input__subtitle\">\r\n            {props.freeNameStatus === \"NO\" && <span>Корешей жопоёбов нам не надо</span>}\r\n            {props.freeNameStatus === \"LOAD\" && <CircularProgress size={20}/>}\r\n            {props.freeNameStatus === \"OK\" && <span style={{color: \"#4fb065\"}}>Ты у нас уникальный пидрила</span>}\r\n          </div> }\r\n    </div>\r\n  );\r\n}\r\n\r\nlet validateEmail = (email) => {\r\n  var re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n  return re.test(String(email).toLowerCase());\r\n}\r\n\r\nlet SignUp = () => {\r\n  let [isLoading, setIsLoading] = useState(false);\r\n  let [fullName, setFullName] = useState(\"\");\r\n  let [username, setUsername] = useState(\"\");\r\n  let [email, setEmail] = useState(\"\");\r\n  let [password, setPassword] = useState(\"\");\r\n  let [confPassword, setConfPassword] = useState(\"\")\r\n  let [freeEmailStatus, setFreeEmailStatus] = useState(null);\r\n  let [freeNameStatus, setFreeNameStatus] = useState(null);\r\n  let [equalPassword, setEqualPassword] = useState(null);\r\n  // null - пользователь ничего не вводил или в поле пусто\r\n  // \"LOAD\" - получение инфы \r\n  // \"OK\"   - почта свободна \r\n  // \"NO\"  - почта не свободна\r\n  // \"ERR\"  - почта не корректно введена\r\n  // let []\r\n  // window.emailTime;\r\n  \r\n  useEffect(() => {\r\n    if (email === \"\") {\r\n      setFreeEmailStatus(null);\r\n      clearTimeout(window.emailTime);\r\n    } else {\r\n      clearTimeout(window.emailTime);\r\n      window.emailTime = setTimeout(() => {\r\n        setFreeEmailStatus(\"LOAD\")\r\n        if (!validateEmail(email)) {\r\n          setFreeEmailStatus(\"ERR\");\r\n          // alert('иди нахуй добаеб')\r\n        } else {\r\n          axios.post(`${URL}/isfreemail`, JSON.stringify({\r\n            mail: email\r\n          })).then(response => {\r\n              setFreeEmailStatus(response.status === 200 ? \"OK\" : \"NO\");\r\n              console.log('response = ', response)\r\n            }).catch(e => {\r\n              setFreeEmailStatus(\"NO\");\r\n            });\r\n        }\r\n      }, 1000)\r\n    }\r\n  }, [email])\r\n  useEffect(() => {\r\n    if (username === \"\") {\r\n      setFreeNameStatus(null);\r\n      clearTimeout(window.nameTime);\r\n    } else {\r\n      clearTimeout(window.nameTime);\r\n      window.nameTime = setTimeout(() => {\r\n        setFreeNameStatus(\"LOAD\");\r\n        axios.post(`${URL}/isfreeuname`, JSON.stringify({\r\n          username: username\r\n        })).then(response => {\r\n          setFreeNameStatus(\"OK\")\r\n        }).catch(e => {\r\n          setFreeNameStatus(\"NO\")\r\n        })\r\n      }, 1000)\r\n    }\r\n  }, [username]) \r\n  useEffect(() => {\r\n    switch (freeEmailStatus) {\r\n      case \"ERR\":\r\n        \r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }, [freeEmailStatus])\r\n  let sendSignUpData = () => {\r\n    setIsLoading(true);\r\n    axios({\r\n      url: `${URL}/signup`,\r\n      method: \"post\",\r\n      headers: {\r\n        // \"Access-Control-Allow-Origin\" : \"https://afc210a26eaa.ngrok.io\",\r\n        // \"Access-Control-Allow-Origin\" : \"*\",\r\n        // \"Access-Control-Allow-Credentials\": \"true\",\r\n      },\r\n      data: JSON.stringify({\r\n        fullName: fullName,\r\n        username: username, \r\n        email: email, \r\n        password: md5(password),\r\n      })\r\n    }).then(response => {\r\n      setIsLoading(false);\r\n      alert('nice');\r\n    }).catch(e => {\r\n      \r\n    })\r\n  }\r\n  return (\r\n    <div className='signup__container'>\r\n      <CustomInput title=\"full name\" value={fullName} change={setFullName}/>\r\n      <CustomInput title=\"username\" value={username} change={setUsername} freeNameStatus={freeNameStatus}/>\r\n      <CustomInput title=\"email\" value={email} change={setEmail} freeEmailStatus={freeEmailStatus}/>\r\n      <CustomInput title=\"password\" value={password} change={setPassword}/>\r\n      <CustomInput title=\"confirm password\" value={confPassword} change={setConfPassword} password={password}/>\r\n      <div className=\"button__container\" onClick={() => sendSignUpData()}>\r\n        <span style={isLoading ? {display: \"none\"} : {}}>Sign up</span>\r\n        <div className=\"loader__wrapper\" style={!isLoading ? {display: \"none\"} : {}}>\r\n          <CircularProgress color='primary' size={25}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nlet SignIn = () => {\r\n  let [username, setUsername] = useState(\"\");\r\n  let [password, setPassword] = useState(\"\");\r\n  let [isLoading, setIsLoading] = useState(false);\r\n  let sendSignInData = () => {\r\n    setIsLoading(true);\r\n    axios({\r\n      url: `${URL}.io/signup`,\r\n      method: \"post\",\r\n      headers: {\r\n        // \"Access-Control-Allow-Origin\" : \"https://afc210a26eaa.ngrok.io\",\r\n        // \"Access-Control-Allow-Origin\" : \"*\",\r\n        // \"Access-Control-Allow-Credentials\": \"true\",\r\n      },\r\n      data: JSON.stringify({\r\n        username: username,\r\n        password: md5(password),\r\n      })\r\n    }).then(response => {\r\n      setIsLoading(false);\r\n      alert('nice');\r\n    }).catch(e => {\r\n      \r\n    })\r\n  }\r\n  return (\r\n    <div className='signup__container'>\r\n      <CustomInput title=\"username\" value={username} change={setUsername}/>\r\n      <CustomInput title=\"password\" value={password} change={setPassword}/>\r\n      {/* <div className=\"shadow__loading\" style={!isLoading ? {display: \"none\"} : {}}>\r\n        <CircularProgress color='primary'/>\r\n      </div> */}\r\n      <div className=\"button__container\" onClick={() => sendSignInData()}>\r\n      <span style={isLoading ? {display: \"none\"} : {}}>Sign in</span>\r\n        <div className=\"loader__wrapper\" style={!isLoading ? {display: \"none\"} : {}}>\r\n          <CircularProgress color='primary' size={25}/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction getUrlParameter(name, GETurl) {\r\n  name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n  var regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n  var results = regex.exec(GETurl);\r\n  return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\r\n};\r\nlet Handler = (props) => {\r\n  console.log('props = ', props)\r\n  let [status, setStatus] = useState(\"LOAD\");\r\n  useEffect(() => {\r\n    let type = getUrlParameter(\"type\", props.location.search);\r\n    if (type === \"confirmemail\") {\r\n      let token = getUrlParameter(\"token\", props.location.search);\r\n      let mail = getUrlParameter(\"mail\", props.location.search);\r\n      console.log(\"mail:\", mail);\r\n      console.log(\"token:\", token);\r\n      // setStatus(\"OK\")\r\n      if (!token || !mail) {\r\n        setStatus(\"BAD__PARAMS\");\r\n        return;\r\n      } else axios({\r\n        url: `${URL}/verify`,\r\n        method: \"post\",\r\n        headers: {\r\n          // \"Access-Control-Allow-Origin\" : \"https://afc210a26eaa.ngrok.io\",\r\n          // \"Access-Control-Allow-Origin\" : \"*\",\r\n          // \"Access-Control-Allow-Credentials\": \"true\",\r\n        },\r\n        data: JSON.stringify({\r\n          email: mail,\r\n          token: token\r\n        })\r\n        }).then(response => {\r\n          setStatus(\"OK\")\r\n        }).catch(e => {\r\n          setStatus(\"ERR\");\r\n        })\r\n    } else {\r\n      setStatus(\"RED__SIGN\");\r\n    }\r\n  }, [status])\r\n  if (status === \"RED__SIGN\") {\r\n    return (\r\n      <Redirect to=\"/sign\">\r\n\r\n      </Redirect>\r\n    )\r\n  }\r\n  if (status === \"LOAD\") {\r\n    return (\r\n     <div>\r\n       loading...\r\n     </div>\r\n    )\r\n  }\r\n  if (status === \"BAD__PARAMS\") {\r\n    return (\r\n      <div>\r\n        bad params\r\n      </div>\r\n    )\r\n  }\r\n  if (status === \"ERR\") {\r\n    return (\r\n      <div>\r\n        err\r\n      </div>\r\n    )\r\n  }\r\n  if (status === \"OK\") {\r\n    return (\r\n      <Redirect to=\"/profile\">\r\n\r\n      </Redirect>\r\n    )\r\n  }\r\n}\r\n\r\nlet App = () => {\r\n  let [activePage, setActivePage] = useState(1); // 1 - SIGN_UP | 2 - SIGN_IN\r\n  return (\r\n    <div id=\"wrapper\">\r\n      <Switch>\r\n        <Route\r\n          path = '/sign'\r\n          render = {() => <div className='main__container'>\r\n          <div className='reg__container'>\r\n            <div className='swap__container'>\r\n              <div className=\"swap__element\" onClick={() => setActivePage(1)} style={activePage === 1 ? {color: \"#c96f6f\"} : {}}>\r\n                SIGN UP\r\n              </div>\r\n              <div className=\"swap__element\"onClick={() => setActivePage(2)} style={activePage === 2? {color: \"#c96f6f\"} : {}}>\r\n                SIGN IN\r\n              </div>\r\n            </div>\r\n            <div style={{width: \"100%\"}}>\r\n              {\r\n                activePage === 1 && <SignUp/>\r\n              }\r\n              {\r\n                activePage === 2 && <SignIn/>\r\n              }\r\n            </div>\r\n          </div>\r\n      </div>}\r\n        />\r\n        <Route\r\n          path=\"/profile\"\r\n          render={(props) => <div>PROFILE BITCH</div>}\r\n        />\r\n        <Route\r\n          path=\"/\"\r\n          render={(props) => <Handler {...props}/>}\r\n        />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n          <App />\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}